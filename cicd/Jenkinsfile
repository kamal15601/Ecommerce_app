pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'your-docker-registry.com'
        APP_NAME = 'ecommerce-app'
        KUBECONFIG = credentials('kubeconfig')
        DOCKER_CREDENTIALS = credentials('docker-registry-credentials')
        SONAR_TOKEN = credentials('sonarqube-token')
    }
    
    tools {
        nodejs '18'
        python '3.11'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.GIT_COMMIT_SHORT = sh(
                        script: 'git rev-parse --short HEAD',
                        returnStdout: true
                    ).trim()
                    env.BUILD_TAG = "${env.BUILD_NUMBER}-${env.GIT_COMMIT_SHORT}"
                }
            }
        }
        
        stage('Setup Environment') {
            steps {
                script {
                    // Setup Python virtual environment
                    sh '''
                        python -m venv venv
                        . venv/bin/activate
                        pip install --upgrade pip
                        pip install -r backend/requirements.txt
                        pip install -r tests/requirements-test.txt
                    '''
                }
            }
        }
        
        stage('Code Quality') {
            parallel {
                stage('Linting') {
                    steps {
                        sh '''
                            . venv/bin/activate
                            flake8 backend/ --max-line-length=88 --exclude=venv
                            pylint backend/app/ --rcfile=.pylintrc || true
                        '''
                    }
                }
                
                stage('Security Scan') {
                    steps {
                        sh '''
                            . venv/bin/activate
                            safety check -r backend/requirements.txt
                            bandit -r backend/app/ -f json -o bandit-report.json || true
                        '''
                    }
                }
            }
        }
        
        stage('Unit Tests') {
            steps {
                sh '''
                    . venv/bin/activate
                    cd tests
                    python -m pytest --junitxml=../test-results.xml --cov=../backend/app --cov-report=xml:../coverage.xml
                '''
            }
            post {
                always {
                    publishTestResults testResultsPattern: 'test-results.xml'
                    publishCoverage adapters: [
                        coberturaAdapter(path: 'coverage.xml')
                    ], sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
                }
            }
        }
        
        stage('SonarQube Analysis') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                    changeRequest()
                }
            }
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh '''
                        sonar-scanner \
                            -Dsonar.projectKey=ecommerce-app \
                            -Dsonar.sources=backend/app \
                            -Dsonar.tests=tests \
                            -Dsonar.python.coverage.reportPaths=coverage.xml \
                            -Dsonar.python.xunit.reportPath=test-results.xml
                    '''
                }
            }
        }
        
        stage('Build Images') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                    branch 'staging'
                }
            }
            parallel {
                stage('Backend Image') {
                    steps {
                        script {
                            def backendImage = docker.build(
                                "${DOCKER_REGISTRY}/${APP_NAME}-backend:${BUILD_TAG}",
                                "./backend"
                            )
                            
                            docker.withRegistry("https://${DOCKER_REGISTRY}", DOCKER_CREDENTIALS) {
                                backendImage.push()
                                backendImage.push("latest")
                            }
                        }
                    }
                }
                
                stage('Database Image') {
                    steps {
                        script {
                            def dbImage = docker.build(
                                "${DOCKER_REGISTRY}/${APP_NAME}-db:${BUILD_TAG}",
                                "./db"
                            )
                            
                            docker.withRegistry("https://${DOCKER_REGISTRY}", DOCKER_CREDENTIALS) {
                                dbImage.push()
                                dbImage.push("latest")
                            }
                        }
                    }
                }
                
                stage('Nginx Image') {
                    steps {
                        script {
                            def nginxImage = docker.build(
                                "${DOCKER_REGISTRY}/${APP_NAME}-nginx:${BUILD_TAG}",
                                "-f docker-compose/nginx.Dockerfile ./docker-compose"
                            )
                            
                            docker.withRegistry("https://${DOCKER_REGISTRY}", DOCKER_CREDENTIALS) {
                                nginxImage.push()
                                nginxImage.push("latest")
                            }
                        }
                    }
                }
            }
        }
        
        stage('Deploy to Development') {
            when {
                branch 'develop'
            }
            steps {
                script {
                    sh '''
                        helm upgrade --install ecommerce-dev k8s/helm/ecommerce \
                            --namespace ecommerce-dev \
                            --create-namespace \
                            --set environment=development \
                            --set image.backend.repository=${DOCKER_REGISTRY}/${APP_NAME}-backend \
                            --set image.backend.tag=${BUILD_TAG} \
                            --set image.database.repository=${DOCKER_REGISTRY}/${APP_NAME}-db \
                            --set image.database.tag=${BUILD_TAG} \
                            --set image.nginx.repository=${DOCKER_REGISTRY}/${APP_NAME}-nginx \
                            --set image.nginx.tag=${BUILD_TAG} \
                            --values k8s/helm/ecommerce/values-dev.yaml
                    '''
                }
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'staging'
            }
            steps {
                script {
                    sh '''
                        helm upgrade --install ecommerce-staging k8s/helm/ecommerce \
                            --namespace ecommerce-staging \
                            --create-namespace \
                            --set environment=staging \
                            --set image.backend.repository=${DOCKER_REGISTRY}/${APP_NAME}-backend \
                            --set image.backend.tag=${BUILD_TAG} \
                            --set image.database.repository=${DOCKER_REGISTRY}/${APP_NAME}-db \
                            --set image.database.tag=${BUILD_TAG} \
                            --set image.nginx.repository=${DOCKER_REGISTRY}/${APP_NAME}-nginx \
                            --set image.nginx.tag=${BUILD_TAG} \
                            --values k8s/helm/ecommerce/values-staging.yaml
                    '''
                }
            }
        }
        
        stage('Integration Tests') {
            when {
                anyOf {
                    branch 'develop'
                    branch 'staging'
                }
            }
            steps {
                script {
                    def namespace = env.BRANCH_NAME == 'develop' ? 'ecommerce-dev' : 'ecommerce-staging'
                    sh """
                        # Wait for deployment to be ready
                        kubectl wait --for=condition=available --timeout=300s deployment/ecommerce-backend -n ${namespace}
                        
                        # Run integration tests
                        kubectl run integration-tests-${BUILD_NUMBER} \
                            --image=${DOCKER_REGISTRY}/${APP_NAME}-backend:${BUILD_TAG} \
                            --namespace=${namespace} \
                            --rm -i --restart=Never \
                            --command -- python -m pytest tests/test_integration.py -v
                    """
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                script {
                    timeout(time: 5, unit: 'MINUTES') {
                        input message: 'Deploy to production?', ok: 'Deploy',
                              submitterParameter: 'DEPLOYER'
                    }
                    
                    sh '''
                        helm upgrade --install ecommerce-prod k8s/helm/ecommerce \
                            --namespace ecommerce-prod \
                            --create-namespace \
                            --set environment=production \
                            --set image.backend.repository=${DOCKER_REGISTRY}/${APP_NAME}-backend \
                            --set image.backend.tag=${BUILD_TAG} \
                            --set image.database.repository=${DOCKER_REGISTRY}/${APP_NAME}-db \
                            --set image.database.tag=${BUILD_TAG} \
                            --set image.nginx.repository=${DOCKER_REGISTRY}/${APP_NAME}-nginx \
                            --set image.nginx.tag=${BUILD_TAG} \
                            --values k8s/helm/ecommerce/values-prod.yaml
                    '''
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        
        success {
            script {
                if (env.BRANCH_NAME == 'main') {
                    slackSend(
                        channel: '#deployments',
                        color: 'good',
                        message: "✅ Production deployment successful! Version: ${BUILD_TAG} deployed by ${env.DEPLOYER}"
                    )
                }
            }
        }
        
        failure {
            slackSend(
                channel: '#alerts',
                color: 'danger',
                message: "❌ Pipeline failed for ${env.BRANCH_NAME} - Build #${env.BUILD_NUMBER}"
            )
        }
    }
}

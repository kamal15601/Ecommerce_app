input {
  beats {
    port => 5044
  }
  
  http {
    port => 8080
    codec => json
  }

  tcp {
    port => 5000
    codec => json_lines
  }
}

filter {
  if [fields][service] == "backend" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} - %{WORD:service} - %{LOGLEVEL:level} - %{GREEDYDATA:message}" }
    }
    
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
  }
  
  if [fields][service] == "frontend" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level}: %{GREEDYDATA:message}" }
    }
    
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
  }
  
  if [fields][type] == "access_log" {
    grok {
      match => { "message" => "%{IPORHOST:clientip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] \"%{WORD:verb} %{DATA:request} HTTP/%{NUMBER:httpversion}\" %{NUMBER:response:int} %{NUMBER:bytes:int} \"%{DATA:referrer}\" \"%{DATA:agent}\"" }
    }
    
    date {
      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
      target => "@timestamp"
    }
    
    useragent {
      source => "agent"
      target => "user_agent"
    }
    
    geoip {
      source => "clientip"
      target => "geoip"
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "logs-%{+YYYY.MM.dd}"
    document_type => "log"
  }
  
  if [level] == "ERROR" or [level] == "CRITICAL" {
    email {
      to => "alerts@example.com"
      from => "logstash@example.com"
      subject => "Error in %{[fields][service]}"
      body => "Error occurred: %{message}"
      domain => "example.com"
      port => 25
    }
  }
  
  stdout {
    codec => rubydebug
  }
}

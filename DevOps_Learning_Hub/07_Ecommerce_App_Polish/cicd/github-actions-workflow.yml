name: E-commerce CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_TAG: ${{ github.sha }}
  APP_NAME: ecommerce

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Lint Backend
        run: |
          cd src/backend
          pip install pylint flake8 black
          pylint --output-format=parseable --fail-under=7.0 *.py || true
          flake8 --max-line-length=100 .
          black --check --diff .
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: src/frontend/package-lock.json
      
      - name: Lint Frontend
        run: |
          cd src/frontend
          npm ci
          npm run lint || true

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Backend Tests
        run: |
          cd src/backend
          pip install -r requirements.txt
          pip install pytest pytest-cov
          pytest --cov=. --cov-report=xml
      
      - name: Upload Backend Coverage
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: src/backend/coverage.xml
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: src/frontend/package-lock.json
      
      - name: Frontend Tests
        run: |
          cd src/frontend
          npm ci
          npm test -- --coverage
      
      - name: Upload Frontend Coverage
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage
          path: src/frontend/coverage/lcov.info

  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Download Backend Coverage
        uses: actions/download-artifact@v3
        with:
          name: backend-coverage
          path: src/backend
      
      - name: Download Frontend Coverage
        uses: actions/download-artifact@v3
        with:
          name: frontend-coverage
          path: src/frontend/coverage
      
      - name: SonarQube Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=ecommerce-app
            -Dsonar.organization=your-organization
            -Dsonar.sources=./src
            -Dsonar.exclusions=**/node_modules/**,**/*.test.js,**/*.spec.js
            -Dsonar.python.coverage.reportPaths=src/backend/coverage.xml
            -Dsonar.javascript.lcov.reportPaths=src/frontend/coverage/lcov.info

  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and Push Backend Image
        uses: docker/build-push-action@v4
        with:
          context: ./src/backend
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.APP_NAME }}-backend:${{ env.IMAGE_TAG }}
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.APP_NAME }}-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v4
        with:
          context: ./src/frontend
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.APP_NAME }}-frontend:${{ env.IMAGE_TAG }}
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.APP_NAME }}-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Scan Backend Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.APP_NAME }}-backend:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Scan Frontend Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.APP_NAME }}-frontend:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Scan Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v1
      
      - name: Update Kubernetes resources
        run: |
          cd infrastructure/kubernetes
          kustomize edit set image backend=${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.APP_NAME }}-backend:${{ env.IMAGE_TAG }}
          kustomize edit set image frontend=${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.APP_NAME }}-frontend:${{ env.IMAGE_TAG }}
      
      - name: Deploy to Staging
        uses: Azure/k8s-deploy@v4
        with:
          namespace: ecommerce-staging
          manifests: |
            infrastructure/kubernetes/backend.yaml
            infrastructure/kubernetes/frontend.yaml
          images: |
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.APP_NAME }}-backend:${{ env.IMAGE_TAG }}
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.APP_NAME }}-frontend:${{ env.IMAGE_TAG }}
          kubectl-version: latest

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v1
      
      - name: Update Kubernetes resources
        run: |
          cd infrastructure/kubernetes
          kustomize edit set image backend=${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.APP_NAME }}-backend:${{ env.IMAGE_TAG }}
          kustomize edit set image frontend=${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.APP_NAME }}-frontend:${{ env.IMAGE_TAG }}
      
      - name: Deploy to Production
        uses: Azure/k8s-deploy@v4
        with:
          namespace: ecommerce-production
          manifests: |
            infrastructure/kubernetes/backend.yaml
            infrastructure/kubernetes/frontend.yaml
          images: |
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.APP_NAME }}-backend:${{ env.IMAGE_TAG }}
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.APP_NAME }}-frontend:${{ env.IMAGE_TAG }}
          kubectl-version: latest
